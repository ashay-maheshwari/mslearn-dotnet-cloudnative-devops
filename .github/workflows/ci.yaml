name: Build and Publish Docker images of GoShop Application 

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # Local environment variables used later in the workflow
  IMAGE_NAME1: 'products'
  IMAGE_NAME2: 'store'
  IMAGE_TAG: ${{ github.sha }}


jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET 8.0.401
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.401'  # Specify the .NET version you need

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --no-restore

    - name: Publish using DefaultContainer profile
      run: dotnet publish /p:PublishProfile=DefaultContainer
      
    - name: Tag Docker image
      run: |
        docker tag products:latest ${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME1 }}:${{ env.IMAGE_TAG }} 
        docker tag store:latest ${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME2 }}:${{ env.IMAGE_TAG }}  
        
    - name: Log in to Azure Container Registry - ProductionClusterregistry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget https://github.com/aquasecurity/trivy/releases/download/v0.42.0/trivy_0.42.0_Linux-64bit.deb
        sudo dpkg -i trivy_0.42.0_Linux-64bit.deb

    - name: Scan Docker image with Trivy - Products 
      run: |
        trivy image --ignore-unfixed --exit-code 0 --no-progress ${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME1 }}:${{ env.IMAGE_TAG }}

    - name: Scan Docker image with Trivy - Store 
      run: |
        trivy image --ignore-unfixed --exit-code 0 --no-progress ${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME2 }}:${{ env.IMAGE_TAG }}
 
    - name: Push Docker image - Product image and Store image
      run: |
       docker push ${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME1 }}:${{ env.IMAGE_TAG }}
       docker push ${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME2 }}:${{ env.IMAGE_TAG }}

    # - name: Push Docker Image
    #   run: docker push your-image-name:latest
